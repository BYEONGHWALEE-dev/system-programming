import java.io.BufferedReader;
import java.io.StringReader;
import java.util.ArrayList;

/**
 * 사용자가 작성한 프로그램 코드를 단어별로 분할 한 후, 의미를 분석하고, 최종 코드로 변환하는 과정을 총괄하는 클래스이다. <br>
 * pass2에서 object code로 변환하는 과정은 혼자 해결할 수 없고 symbolTable과 instTable의 정보가 필요하므로 이를 링크시킨다.<br>
 * section 마다 인스턴스가 하나씩 할당된다.
 *
 */
public class TokenTable {
	public static final int MAX_OPERAND=3;
	
	/* bit 조작의 가독성을 위한 선언 */
	public static final int nFlag=32;
	public static final int iFlag=16;
	public static final int xFlag=8;
	public static final int bFlag=4;
	public static final int pFlag=2;
	public static final int eFlag=1;
	public static int locationCounter = 0;
	
	/* Token을 다룰 때 필요한 테이블들을 링크시킨다. */
	SymbolTable symTab;
	InstTable instTab;
	
	
	/** 각 line을 의미별로 분할하고 분석하는 공간. */
	ArrayList<Token> tokenList;
	
	/**
	 * 초기화하면서 symTable과 instTable을 링크시킨다.
	 * @param symTab : 해당 section과 연결되어있는 symbol table
	 * @param instTab : instruction 명세가 정의된 instTable
	 */
	public TokenTable(SymbolTable symTab, InstTable instTab) {
		//...
		this.symTab = symTab;
		this.instTab = instTab;
	}
	
	/**
	 * 일반 문자열을 받아서 Token단위로 분리시켜 tokenList에 추가한다.
	 * @param line : 분리되지 않은 일반 문자열
	 */
	public void putToken(String line) {
		tokenList.add(new Token(line, instTab, symTab));
	}
	
	/**
	 * tokenList에서 index에 해당하는 Token을 리턴한다.
	 * @param index
	 * @return : index번호에 해당하는 코드를 분석한 Token 클래스
	 */
	public Token getToken(int index) {
		return tokenList.get(index);
	}
	
	/**
	 * Pass2 과정에서 사용한다.
	 * instruction table, symbol table 등을 참조하여 objectcode를 생성하고, 이를 저장한다.
	 * @param index
	 */
	public void makeObjectCode(int index){
		//...
	}
	
	/** 
	 * index번호에 해당하는 object code를 리턴한다.
	 * @param index
	 * @return : object code
	 */
	public String getObjectCode(int index) {
		return tokenList.get(index).objectCode;
	}

	// getter
	public InstTable getInsttable(){
		return instTab;
	}

	public SymbolTable getSymbolTable(){
		return symTab;
	}
	
}

/**
 * 각 라인별로 저장된 코드를 단어 단위로 분할한 후  의미를 해석하는 데에 사용되는 변수와 연산을 정의한다. 
 * 의미 해석이 끝나면 pass2에서 object code로 변형되었을 때의 바이트 코드 역시 저장한다.
 */
class Token{
	//의미 분석 단계에서 사용되는 변수들
	int location;
	String label;
	String operator;
	String[] operand;
	String comment;
	char arithmetic;
	char nixbpe;

	// object code 생성 단계에서 사용되는 변수들 
	String objectCode;
	int byteSize;
	
	/**
	 * 클래스를 초기화 하면서 바로 line의 의미 분석을 수행한다. 
	 * @param line 문장단위로 저장된 프로그램 코드
	 */
	public Token(String line, InstTable instTab, SymbolTable symTab) {
		//initialize 추가
		parsing(line, instTab);
		putInSymbolTable(symTab);
		addLocationCounter(operator, operand, instTab);
	}
	
	/**
	 * line의 실질적인 분석을 수행하는 함수. Token의 각 변수에 분석한 결과를 저장한다.
	 * @param line 문장단위로 저장된 프로그램 코드.
	 */
	public void parsing(String line, InstTable instTab) {
		String[] parts = line.split("\t");
		this.location = TokenTable.locationCounter;
		this.label = parts[0];
		this.operator = parts[1];
		this.operand = divOperand(parts[2]);
		this.comment = parts[3];
	}
	
	/** 
	 * n,i,x,b,p,e flag를 설정한다. <br><br>
	 * 
	 * 사용 예 : setFlag(nFlag, 1); <br>
	 *   또는     setFlag(TokenTable.nFlag, 1);
	 * 
	 * @param flag : 원하는 비트 위치
	 * @param value : 집어넣고자 하는 값. 1또는 0으로 선언한다.
	 */
	public void setFlag(int flag, int value) {
		//...
	}
	
	/**
	 * 원하는 flag들의 값을 얻어올 수 있다. flag의 조합을 통해 동시에 여러개의 플래그를 얻는 것 역시 가능하다 <br><br>
	 * 
	 * 사용 예 : getFlag(nFlag) <br>
	 *   또는     getFlag(nFlag|iFlag)
	 * 
	 * @param flags : 값을 확인하고자 하는 비트 위치
	 * @return : 비트위치에 들어가 있는 값. 플래그별로 각각 32, 16, 8, 4, 2, 1의 값을 리턴할 것임.
	 */
	public int getFlag(int flags) {
		return nixbpe & flags;
	}

	/** 개인적으로 필요해서 만든 함수 */
	// Operand 분리 method -> Operand가 있으면 tempArray의 길이를 반환, null인 경우 0을 반환
	public String[] divOperand(String operand){
		if(operand != null){
			String[] tempArray = operand.split("[,+-]");
			// 나누면서 사칙 연산자 있으면 setArithmetic
			setArithmetic(operand);
			return tempArray;
		}
		return new String[0];
	}

	// 사칙연산자가 있다면 넣음
	public void setArithmetic(String operand){
		for(char c : operand.toCharArray()){
			if(c == '+' || c == '-'){
				this.arithmetic = c;
			}
		}
	}

	// location counter 계산하는 method with Instruction
	public void addLocationCounter(String value, String[] operand, InstTable instTable) {
		int format = Utility.returnFormat(value, instTable);
		if(format > 0){ // Instruction table에 있을 때
			TokenTable.locationCounter += format;
			this.byteSize = format;
		}
		else {
			TokenTable.locationCounter += Utility.calConstant(value); // 상수 locationCounter 계산
			TokenTable.locationCounter += Utility.calVariable(value, operand); // 변수 locationCounter 계산
			this.byteSize = (Utility.calVariable(value, operand) == 0)
					? Utility.calConstant(value)
					: Utility.calVariable(value, operand);
			}
	}

	/**
	 * 토큰 생성할때 label 확인 후 -> symbol Table에 바로 넣어버림
	 */
	public void putInSymbolTable(SymbolTable symTab) {
		if(!this.label.isEmpty()){
			symTab.putSymbol(this.label, this.location);
		}
	}

}


